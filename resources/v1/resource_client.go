// Code generated by Sideko (sideko.dev)
package v1

import (
	sdkcore "apigee_api/core"
	activate "apigee_api/resources/v1/activate"
	adjust "apigee_api/resources/v1/adjust"
	aliases "apigee_api/resources/v1/aliases"
	analytics "apigee_api/resources/v1/analytics"
	apicategories "apigee_api/resources/v1/apicategories"
	apiproducts "apigee_api/resources/v1/apiproducts"
	apis "apigee_api/resources/v1/apis"
	apps "apigee_api/resources/v1/apps"
	archive_deployments "apigee_api/resources/v1/archive_deployments"
	archive_deployments_generate_upload_url "apigee_api/resources/v1/archive_deployments_generate_upload_url"
	attachments "apigee_api/resources/v1/attachments"
	attributes "apigee_api/resources/v1/attributes"
	canaryevaluations "apigee_api/resources/v1/canaryevaluations"
	certificate "apigee_api/resources/v1/certificate"
	compute_environment_scores "apigee_api/resources/v1/compute_environment_scores"
	credit "apigee_api/resources/v1/credit"
	csr "apigee_api/resources/v1/csr"
	data "apigee_api/resources/v1/data"
	datacollectors "apigee_api/resources/v1/datacollectors"
	debugsessions "apigee_api/resources/v1/debugsessions"
	deployments "apigee_api/resources/v1/deployments"
	deployments_generate_deploy_change_report "apigee_api/resources/v1/deployments_generate_deploy_change_report"
	deployments_generate_undeploy_change_report "apigee_api/resources/v1/deployments_generate_undeploy_change_report"
	developers "apigee_api/resources/v1/developers"
	endpoint_attachments "apigee_api/resources/v1/endpoint_attachments"
	entries "apigee_api/resources/v1/entries"
	envgroups "apigee_api/resources/v1/envgroups"
	environments "apigee_api/resources/v1/environments"
	expire "apigee_api/resources/v1/expire"
	generate_download_url "apigee_api/resources/v1/generate_download_url"
	get_iam_policy "apigee_api/resources/v1/get_iam_policy"
	get_project_mapping "apigee_api/resources/v1/get_project_mapping"
	get_sync_authorization "apigee_api/resources/v1/get_sync_authorization"
	host_queries "apigee_api/resources/v1/host_queries"
	host_security_reports "apigee_api/resources/v1/host_security_reports"
	instances "apigee_api/resources/v1/instances"
	keys "apigee_api/resources/v1/keys"
	keystores "apigee_api/resources/v1/keystores"
	keyvaluemaps "apigee_api/resources/v1/keyvaluemaps"
	list_revisions "apigee_api/resources/v1/list_revisions"
	nat_addresses "apigee_api/resources/v1/nat_addresses"
	operations "apigee_api/resources/v1/operations"
	organizations "apigee_api/resources/v1/organizations"
	overrides "apigee_api/resources/v1/overrides"
	provision_organization "apigee_api/resources/v1/provision_organization"
	queries "apigee_api/resources/v1/queries"
	rateplans "apigee_api/resources/v1/rateplans"
	references "apigee_api/resources/v1/references"
	report_status "apigee_api/resources/v1/report_status"
	reports "apigee_api/resources/v1/reports"
	resourcefiles "apigee_api/resources/v1/resourcefiles"
	security_incidents "apigee_api/resources/v1/security_incidents"
	security_profiles "apigee_api/resources/v1/security_profiles"
	security_reports "apigee_api/resources/v1/security_reports"
	security_stats_query_tabular_stats "apigee_api/resources/v1/security_stats_query_tabular_stats"
	security_stats_query_time_series_stats "apigee_api/resources/v1/security_stats_query_time_series_stats"
	set_addons "apigee_api/resources/v1/set_addons"
	set_iam_policy "apigee_api/resources/v1/set_iam_policy"
	set_sync_authorization "apigee_api/resources/v1/set_sync_authorization"
	sharedflows "apigee_api/resources/v1/sharedflows"
	subscribe "apigee_api/resources/v1/subscribe"
	subscriptions "apigee_api/resources/v1/subscriptions"
	targetservers "apigee_api/resources/v1/targetservers"
	test_iam_permissions "apigee_api/resources/v1/test_iam_permissions"
	unsubscribe "apigee_api/resources/v1/unsubscribe"
	types "apigee_api/types"
	bytes "bytes"
	json "encoding/json"
	io "io"
	http "net/http"
	url "net/url"
)

type Client struct {
	coreClient                              *sdkcore.CoreClient
	Data                                    *data.Client
	Deployments                             *deployments.Client
	Resourcefiles                           *resourcefiles.Client
	Certificate                             *certificate.Client
	Csr                                     *csr.Client
	Operations                              *operations.Client
	GetProjectMapping                       *get_project_mapping.Client
	ListRevisions                           *list_revisions.Client
	Analytics                               *analytics.Client
	Apicategories                           *apicategories.Client
	Apiproducts                             *apiproducts.Client
	Apis                                    *apis.Client
	Apps                                    *apps.Client
	ArchiveDeployments                      *archive_deployments.Client
	Attachments                             *attachments.Client
	Attributes                              *attributes.Client
	Datacollectors                          *datacollectors.Client
	Debugsessions                           *debugsessions.Client
	Developers                              *developers.Client
	EndpointAttachments                     *endpoint_attachments.Client
	Entries                                 *entries.Client
	Envgroups                               *envgroups.Client
	HostQueries                             *host_queries.Client
	HostSecurityReports                     *host_security_reports.Client
	Instances                               *instances.Client
	NatAddresses                            *nat_addresses.Client
	Overrides                               *overrides.Client
	Queries                                 *queries.Client
	Rateplans                               *rateplans.Client
	Reports                                 *reports.Client
	SecurityIncidents                       *security_incidents.Client
	SecurityProfiles                        *security_profiles.Client
	SecurityReports                         *security_reports.Client
	Sharedflows                             *sharedflows.Client
	Subscriptions                           *subscriptions.Client
	GetIamPolicy                            *get_iam_policy.Client
	Organizations                           *organizations.Client
	ReportStatus                            *report_status.Client
	DeploymentsGenerateDeployChangeReport   *deployments_generate_deploy_change_report.Client
	DeploymentsGenerateUndeployChangeReport *deployments_generate_undeploy_change_report.Client
	Activate                                *activate.Client
	Adjust                                  *adjust.Client
	Credit                                  *credit.Client
	Expire                                  *expire.Client
	GenerateDownloadUrl                     *generate_download_url.Client
	GetSyncAuthorization                    *get_sync_authorization.Client
	SetSyncAuthorization                    *set_sync_authorization.Client
	SecurityStatsQueryTabularStats          *security_stats_query_tabular_stats.Client
	SecurityStatsQueryTimeSeriesStats       *security_stats_query_time_series_stats.Client
	SetAddons                               *set_addons.Client
	Aliases                                 *aliases.Client
	ArchiveDeploymentsGenerateUploadUrl     *archive_deployments_generate_upload_url.Client
	Canaryevaluations                       *canaryevaluations.Client
	Environments                            *environments.Client
	Keys                                    *keys.Client
	Keystores                               *keystores.Client
	Keyvaluemaps                            *keyvaluemaps.Client
	References                              *references.Client
	Targetservers                           *targetservers.Client
	Subscribe                               *subscribe.Client
	Unsubscribe                             *unsubscribe.Client
	ComputeEnvironmentScores                *compute_environment_scores.Client
	ProvisionOrganization                   *provision_organization.Client
	SetIamPolicy                            *set_iam_policy.Client
	TestIamPermissions                      *test_iam_permissions.Client
}
type RequestModifier = func(req *http.Request) error

// Instantiate a new resource client
func NewClient(coreClient *sdkcore.CoreClient) *Client {
	client := Client{
		coreClient:                              coreClient,
		Data:                                    data.NewClient(coreClient),
		Deployments:                             deployments.NewClient(coreClient),
		Resourcefiles:                           resourcefiles.NewClient(coreClient),
		Certificate:                             certificate.NewClient(coreClient),
		Csr:                                     csr.NewClient(coreClient),
		Operations:                              operations.NewClient(coreClient),
		GetProjectMapping:                       get_project_mapping.NewClient(coreClient),
		ListRevisions:                           list_revisions.NewClient(coreClient),
		Analytics:                               analytics.NewClient(coreClient),
		Apicategories:                           apicategories.NewClient(coreClient),
		Apiproducts:                             apiproducts.NewClient(coreClient),
		Apis:                                    apis.NewClient(coreClient),
		Apps:                                    apps.NewClient(coreClient),
		ArchiveDeployments:                      archive_deployments.NewClient(coreClient),
		Attachments:                             attachments.NewClient(coreClient),
		Attributes:                              attributes.NewClient(coreClient),
		Datacollectors:                          datacollectors.NewClient(coreClient),
		Debugsessions:                           debugsessions.NewClient(coreClient),
		Developers:                              developers.NewClient(coreClient),
		EndpointAttachments:                     endpoint_attachments.NewClient(coreClient),
		Entries:                                 entries.NewClient(coreClient),
		Envgroups:                               envgroups.NewClient(coreClient),
		HostQueries:                             host_queries.NewClient(coreClient),
		HostSecurityReports:                     host_security_reports.NewClient(coreClient),
		Instances:                               instances.NewClient(coreClient),
		NatAddresses:                            nat_addresses.NewClient(coreClient),
		Overrides:                               overrides.NewClient(coreClient),
		Queries:                                 queries.NewClient(coreClient),
		Rateplans:                               rateplans.NewClient(coreClient),
		Reports:                                 reports.NewClient(coreClient),
		SecurityIncidents:                       security_incidents.NewClient(coreClient),
		SecurityProfiles:                        security_profiles.NewClient(coreClient),
		SecurityReports:                         security_reports.NewClient(coreClient),
		Sharedflows:                             sharedflows.NewClient(coreClient),
		Subscriptions:                           subscriptions.NewClient(coreClient),
		GetIamPolicy:                            get_iam_policy.NewClient(coreClient),
		Organizations:                           organizations.NewClient(coreClient),
		ReportStatus:                            report_status.NewClient(coreClient),
		DeploymentsGenerateDeployChangeReport:   deployments_generate_deploy_change_report.NewClient(coreClient),
		DeploymentsGenerateUndeployChangeReport: deployments_generate_undeploy_change_report.NewClient(coreClient),
		Activate:                                activate.NewClient(coreClient),
		Adjust:                                  adjust.NewClient(coreClient),
		Credit:                                  credit.NewClient(coreClient),
		Expire:                                  expire.NewClient(coreClient),
		GenerateDownloadUrl:                     generate_download_url.NewClient(coreClient),
		GetSyncAuthorization:                    get_sync_authorization.NewClient(coreClient),
		SetSyncAuthorization:                    set_sync_authorization.NewClient(coreClient),
		SecurityStatsQueryTabularStats:          security_stats_query_tabular_stats.NewClient(coreClient),
		SecurityStatsQueryTimeSeriesStats:       security_stats_query_time_series_stats.NewClient(coreClient),
		SetAddons:                               set_addons.NewClient(coreClient),
		Aliases:                                 aliases.NewClient(coreClient),
		ArchiveDeploymentsGenerateUploadUrl:     archive_deployments_generate_upload_url.NewClient(coreClient),
		Canaryevaluations:                       canaryevaluations.NewClient(coreClient),
		Environments:                            environments.NewClient(coreClient),
		Keys:                                    keys.NewClient(coreClient),
		Keystores:                               keystores.NewClient(coreClient),
		Keyvaluemaps:                            keyvaluemaps.NewClient(coreClient),
		References:                              references.NewClient(coreClient),
		Targetservers:                           targetservers.NewClient(coreClient),
		Subscribe:                               subscribe.NewClient(coreClient),
		Unsubscribe:                             unsubscribe.NewClient(coreClient),
		ComputeEnvironmentScores:                compute_environment_scores.NewClient(coreClient),
		ProvisionOrganization:                   provision_organization.NewClient(coreClient),
		SetIamPolicy:                            set_iam_policy.NewClient(coreClient),
		TestIamPermissions:                      test_iam_permissions.NewClient(coreClient),
	}

	return &client
}

// register api methods (keep comment for code generation)

// Update an existing custom report definition
func (c *Client) Put(request PutRequest, reqModifiers ...RequestModifier) (types.GoogleCloudApigeeV1CustomReport, error) {
	// build & send request (keep comment for code generation)

	// URL formatting
	joined, err := url.JoinPath(c.coreClient.BaseURL, "/v1/"+sdkcore.FmtStringParam(request.Name))
	if err != nil {
		return types.GoogleCloudApigeeV1CustomReport{}, err
	}
	url, err := url.Parse(joined)
	if err != nil {
		return types.GoogleCloudApigeeV1CustomReport{}, err
	}

	// Query params
	params := url.Query()
	queryXgafv, err := request.QueryXgafv.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "$.xgafv", queryXgafv, false)
	}
	accessToken, err := request.AccessToken.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "access_token", accessToken, false)
	}
	alt, err := request.Alt.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "alt", alt, false)
	}
	callback, err := request.Callback.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "callback", callback, false)
	}
	fields, err := request.Fields.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "fields", fields, false)
	}
	ignoreExpiryValidation, err := request.IgnoreExpiryValidation.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "ignoreExpiryValidation", ignoreExpiryValidation, false)
	}
	ignoreNewlineValidation, err := request.IgnoreNewlineValidation.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "ignoreNewlineValidation", ignoreNewlineValidation, false)
	}
	key, err := request.Key.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "key", key, false)
	}
	oauthToken, err := request.OauthToken.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "oauth_token", oauthToken, false)
	}
	prettyPrint, err := request.PrettyPrint.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "prettyPrint", prettyPrint, false)
	}
	quotaUser, err := request.QuotaUser.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "quotaUser", quotaUser, false)
	}
	uploadType, err := request.UploadType.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "uploadType", uploadType, false)
	}
	uploadProtocol, err := request.UploadProtocol.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "upload_protocol", uploadProtocol, false)
	}
	url.RawQuery = params.Encode()

	// Prep body
	reqBody, err := json.Marshal(request.Data)
	if err != nil {
		return types.GoogleCloudApigeeV1CustomReport{}, err
	}
	reqBodyBuf := bytes.NewBuffer([]byte(reqBody))

	// Init request
	req, err := http.NewRequest("PUT", url.String(), reqBodyBuf)
	if err != nil {
		return types.GoogleCloudApigeeV1CustomReport{}, err
	}

	// Add headers
	req.Header.Add("x-sideko-sdk-language", "Go")
	req.Header.Add("Content-Type", "application/json")

	// Add auth
	c.coreClient.AddAuth([]string{"Oauth2", "Oauth2c"}, req)

	// Add base client & request level modifiers
	if err := c.coreClient.ApplyModifiers(req, reqModifiers); err != nil {
		return types.GoogleCloudApigeeV1CustomReport{}, err
	}

	// Dispatch request
	resp, err := c.coreClient.HttpClient.Do(req)
	if err != nil {
		return types.GoogleCloudApigeeV1CustomReport{}, err
	}
	defer resp.Body.Close()

	// Handle response
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return types.GoogleCloudApigeeV1CustomReport{}, err
	}

	// Check status
	if resp.StatusCode >= 300 {
		return types.GoogleCloudApigeeV1CustomReport{}, sdkcore.NewApiError(*req, *resp, body)
	}
	var bodyData types.GoogleCloudApigeeV1CustomReport
	err = json.Unmarshal(body, &bodyData)
	if err != nil {
		return types.GoogleCloudApigeeV1CustomReport{}, err
	}
	return bodyData, nil
}

// Updates a shared flow revision. This operation is only allowed on revisions which have never been deployed. After deployment a revision becomes immutable, even if it becomes undeployed. The payload is a ZIP-formatted shared flow. Content type must be either multipart/form-data or application/octet-stream.
func (c *Client) Create(request CreateRequest, reqModifiers ...RequestModifier) (types.GoogleCloudApigeeV1SharedFlowRevision1, error) {
	// build & send request (keep comment for code generation)

	// URL formatting
	joined, err := url.JoinPath(c.coreClient.BaseURL, "/v1/"+sdkcore.FmtStringParam(request.Name))
	if err != nil {
		return types.GoogleCloudApigeeV1SharedFlowRevision1{}, err
	}
	url, err := url.Parse(joined)
	if err != nil {
		return types.GoogleCloudApigeeV1SharedFlowRevision1{}, err
	}

	// Query params
	params := url.Query()
	queryXgafv, err := request.QueryXgafv.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "$.xgafv", queryXgafv, false)
	}
	accessToken, err := request.AccessToken.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "access_token", accessToken, false)
	}
	alt, err := request.Alt.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "alt", alt, false)
	}
	callback, err := request.Callback.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "callback", callback, false)
	}
	fields, err := request.Fields.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "fields", fields, false)
	}
	key, err := request.Key.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "key", key, false)
	}
	oauthToken, err := request.OauthToken.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "oauth_token", oauthToken, false)
	}
	prettyPrint, err := request.PrettyPrint.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "prettyPrint", prettyPrint, false)
	}
	quotaUser, err := request.QuotaUser.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "quotaUser", quotaUser, false)
	}
	uploadType, err := request.UploadType.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "uploadType", uploadType, false)
	}
	uploadProtocol, err := request.UploadProtocol.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "upload_protocol", uploadProtocol, false)
	}
	validate, err := request.Validate.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "validate", validate, false)
	}
	url.RawQuery = params.Encode()

	// Prep body
	reqBody, err := json.Marshal(request.Data)
	if err != nil {
		return types.GoogleCloudApigeeV1SharedFlowRevision1{}, err
	}
	reqBodyBuf := bytes.NewBuffer([]byte(reqBody))

	// Init request
	req, err := http.NewRequest("POST", url.String(), reqBodyBuf)
	if err != nil {
		return types.GoogleCloudApigeeV1SharedFlowRevision1{}, err
	}

	// Add headers
	req.Header.Add("x-sideko-sdk-language", "Go")
	req.Header.Add("Content-Type", "application/json")

	// Add auth
	c.coreClient.AddAuth([]string{"Oauth2", "Oauth2c"}, req)

	// Add base client & request level modifiers
	if err := c.coreClient.ApplyModifiers(req, reqModifiers); err != nil {
		return types.GoogleCloudApigeeV1SharedFlowRevision1{}, err
	}

	// Dispatch request
	resp, err := c.coreClient.HttpClient.Do(req)
	if err != nil {
		return types.GoogleCloudApigeeV1SharedFlowRevision1{}, err
	}
	defer resp.Body.Close()

	// Handle response
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return types.GoogleCloudApigeeV1SharedFlowRevision1{}, err
	}

	// Check status
	if resp.StatusCode >= 300 {
		return types.GoogleCloudApigeeV1SharedFlowRevision1{}, sdkcore.NewApiError(*req, *resp, body)
	}
	var bodyData types.GoogleCloudApigeeV1SharedFlowRevision1
	err = json.Unmarshal(body, &bodyData)
	if err != nil {
		return types.GoogleCloudApigeeV1SharedFlowRevision1{}, err
	}
	return bodyData, nil
}

// Updates a category on the portal.
func (c *Client) Patch(request PatchRequest, reqModifiers ...RequestModifier) (types.GoogleCloudApigeeV1ApiCategory, error) {
	// build & send request (keep comment for code generation)

	// URL formatting
	joined, err := url.JoinPath(c.coreClient.BaseURL, "/v1/"+sdkcore.FmtStringParam(request.Name))
	if err != nil {
		return types.GoogleCloudApigeeV1ApiCategory{}, err
	}
	url, err := url.Parse(joined)
	if err != nil {
		return types.GoogleCloudApigeeV1ApiCategory{}, err
	}

	// Query params
	params := url.Query()
	queryXgafv, err := request.QueryXgafv.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "$.xgafv", queryXgafv, false)
	}
	accessToken, err := request.AccessToken.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "access_token", accessToken, false)
	}
	alt, err := request.Alt.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "alt", alt, false)
	}
	callback, err := request.Callback.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "callback", callback, false)
	}
	fields, err := request.Fields.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "fields", fields, false)
	}
	key, err := request.Key.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "key", key, false)
	}
	oauthToken, err := request.OauthToken.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "oauth_token", oauthToken, false)
	}
	prettyPrint, err := request.PrettyPrint.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "prettyPrint", prettyPrint, false)
	}
	quotaUser, err := request.QuotaUser.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "quotaUser", quotaUser, false)
	}
	updateMask, err := request.UpdateMask.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "updateMask", updateMask, false)
	}
	uploadType, err := request.UploadType.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "uploadType", uploadType, false)
	}
	uploadProtocol, err := request.UploadProtocol.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "upload_protocol", uploadProtocol, false)
	}
	url.RawQuery = params.Encode()

	// Prep body
	reqBody, err := json.Marshal(request.Data)
	if err != nil {
		return types.GoogleCloudApigeeV1ApiCategory{}, err
	}
	reqBodyBuf := bytes.NewBuffer([]byte(reqBody))

	// Init request
	req, err := http.NewRequest("PATCH", url.String(), reqBodyBuf)
	if err != nil {
		return types.GoogleCloudApigeeV1ApiCategory{}, err
	}

	// Add headers
	req.Header.Add("x-sideko-sdk-language", "Go")
	req.Header.Add("Content-Type", "application/json")

	// Add auth
	c.coreClient.AddAuth([]string{"Oauth2", "Oauth2c"}, req)

	// Add base client & request level modifiers
	if err := c.coreClient.ApplyModifiers(req, reqModifiers); err != nil {
		return types.GoogleCloudApigeeV1ApiCategory{}, err
	}

	// Dispatch request
	resp, err := c.coreClient.HttpClient.Do(req)
	if err != nil {
		return types.GoogleCloudApigeeV1ApiCategory{}, err
	}
	defer resp.Body.Close()

	// Handle response
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return types.GoogleCloudApigeeV1ApiCategory{}, err
	}

	// Check status
	if resp.StatusCode >= 300 {
		return types.GoogleCloudApigeeV1ApiCategory{}, sdkcore.NewApiError(*req, *resp, body)
	}
	var bodyData types.GoogleCloudApigeeV1ApiCategory
	err = json.Unmarshal(body, &bodyData)
	if err != nil {
		return types.GoogleCloudApigeeV1ApiCategory{}, err
	}
	return bodyData, nil
}

// Lists the Apigee organizations and associated Google Cloud projects that you have permission to access. See [Understanding organizations](https://cloud.google.com/apigee/docs/api-platform/fundamentals/organization-structure).
func (c *Client) GetByParent(request GetByParentRequest, reqModifiers ...RequestModifier) (types.GoogleCloudApigeeV1ListOrganizationsResponse, error) {
	// build & send request (keep comment for code generation)

	// URL formatting
	joined, err := url.JoinPath(c.coreClient.BaseURL, "/v1/"+sdkcore.FmtStringParam(request.Parent))
	if err != nil {
		return types.GoogleCloudApigeeV1ListOrganizationsResponse{}, err
	}
	url, err := url.Parse(joined)
	if err != nil {
		return types.GoogleCloudApigeeV1ListOrganizationsResponse{}, err
	}

	// Query params
	params := url.Query()
	queryXgafv, err := request.QueryXgafv.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "$.xgafv", queryXgafv, false)
	}
	accessToken, err := request.AccessToken.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "access_token", accessToken, false)
	}
	alt, err := request.Alt.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "alt", alt, false)
	}
	callback, err := request.Callback.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "callback", callback, false)
	}
	fields, err := request.Fields.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "fields", fields, false)
	}
	key, err := request.Key.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "key", key, false)
	}
	oauthToken, err := request.OauthToken.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "oauth_token", oauthToken, false)
	}
	prettyPrint, err := request.PrettyPrint.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "prettyPrint", prettyPrint, false)
	}
	quotaUser, err := request.QuotaUser.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "quotaUser", quotaUser, false)
	}
	uploadType, err := request.UploadType.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "uploadType", uploadType, false)
	}
	uploadProtocol, err := request.UploadProtocol.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "upload_protocol", uploadProtocol, false)
	}
	url.RawQuery = params.Encode()

	// Init request
	req, err := http.NewRequest("GET", url.String(), nil)
	if err != nil {
		return types.GoogleCloudApigeeV1ListOrganizationsResponse{}, err
	}

	// Add headers
	req.Header.Add("x-sideko-sdk-language", "Go")

	// Add auth
	c.coreClient.AddAuth([]string{"Oauth2", "Oauth2c"}, req)

	// Add base client & request level modifiers
	if err := c.coreClient.ApplyModifiers(req, reqModifiers); err != nil {
		return types.GoogleCloudApigeeV1ListOrganizationsResponse{}, err
	}

	// Dispatch request
	resp, err := c.coreClient.HttpClient.Do(req)
	if err != nil {
		return types.GoogleCloudApigeeV1ListOrganizationsResponse{}, err
	}
	defer resp.Body.Close()

	// Handle response
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return types.GoogleCloudApigeeV1ListOrganizationsResponse{}, err
	}

	// Check status
	if resp.StatusCode >= 300 {
		return types.GoogleCloudApigeeV1ListOrganizationsResponse{}, sdkcore.NewApiError(*req, *resp, body)
	}
	var bodyData types.GoogleCloudApigeeV1ListOrganizationsResponse
	err = json.Unmarshal(body, &bodyData)
	if err != nil {
		return types.GoogleCloudApigeeV1ListOrganizationsResponse{}, err
	}
	return bodyData, nil
}

// Gets a category on the portal.
func (c *Client) GetByName(request GetByNameRequest, reqModifiers ...RequestModifier) (types.GoogleCloudApigeeV1ApiCategory, error) {
	// build & send request (keep comment for code generation)

	// URL formatting
	joined, err := url.JoinPath(c.coreClient.BaseURL, "/v1/"+sdkcore.FmtStringParam(request.Name))
	if err != nil {
		return types.GoogleCloudApigeeV1ApiCategory{}, err
	}
	url, err := url.Parse(joined)
	if err != nil {
		return types.GoogleCloudApigeeV1ApiCategory{}, err
	}

	// Query params
	params := url.Query()
	queryXgafv, err := request.QueryXgafv.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "$.xgafv", queryXgafv, false)
	}
	accessToken, err := request.AccessToken.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "access_token", accessToken, false)
	}
	alt, err := request.Alt.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "alt", alt, false)
	}
	callback, err := request.Callback.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "callback", callback, false)
	}
	envgroupHostname, err := request.EnvgroupHostname.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "envgroupHostname", envgroupHostname, false)
	}
	fields, err := request.Fields.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "fields", fields, false)
	}
	filter, err := request.Filter.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "filter", filter, false)
	}
	format, err := request.Format.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "format", format, false)
	}
	key, err := request.Key.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "key", key, false)
	}
	limit, err := request.Limit.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "limit", limit, false)
	}
	oauthToken, err := request.OauthToken.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "oauth_token", oauthToken, false)
	}
	offset, err := request.Offset.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "offset", offset, false)
	}
	prettyPrint, err := request.PrettyPrint.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "prettyPrint", prettyPrint, false)
	}
	quotaUser, err := request.QuotaUser.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "quotaUser", quotaUser, false)
	}
	realtime, err := request.Realtime.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "realtime", realtime, false)
	}
	selectQuery, err := request.SelectQuery.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "select", selectQuery, false)
	}
	sort, err := request.Sort.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "sort", sort, false)
	}
	sortby, err := request.Sortby.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "sortby", sortby, false)
	}
	timeRange, err := request.TimeRange.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "timeRange", timeRange, false)
	}
	timeUnit, err := request.TimeUnit.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "timeUnit", timeUnit, false)
	}
	topk, err := request.Topk.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "topk", topk, false)
	}
	tsAscending, err := request.TsAscending.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "tsAscending", tsAscending, false)
	}
	tzo, err := request.Tzo.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "tzo", tzo, false)
	}
	uploadType, err := request.UploadType.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "uploadType", uploadType, false)
	}
	uploadProtocol, err := request.UploadProtocol.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "upload_protocol", uploadProtocol, false)
	}
	url.RawQuery = params.Encode()

	// Init request
	req, err := http.NewRequest("GET", url.String(), nil)
	if err != nil {
		return types.GoogleCloudApigeeV1ApiCategory{}, err
	}

	// Add headers
	req.Header.Add("x-sideko-sdk-language", "Go")

	// Add auth
	c.coreClient.AddAuth([]string{"Oauth2", "Oauth2c"}, req)

	// Add base client & request level modifiers
	if err := c.coreClient.ApplyModifiers(req, reqModifiers); err != nil {
		return types.GoogleCloudApigeeV1ApiCategory{}, err
	}

	// Dispatch request
	resp, err := c.coreClient.HttpClient.Do(req)
	if err != nil {
		return types.GoogleCloudApigeeV1ApiCategory{}, err
	}
	defer resp.Body.Close()

	// Handle response
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return types.GoogleCloudApigeeV1ApiCategory{}, err
	}

	// Check status
	if resp.StatusCode >= 300 {
		return types.GoogleCloudApigeeV1ApiCategory{}, sdkcore.NewApiError(*req, *resp, body)
	}
	var bodyData types.GoogleCloudApigeeV1ApiCategory
	err = json.Unmarshal(body, &bodyData)
	if err != nil {
		return types.GoogleCloudApigeeV1ApiCategory{}, err
	}
	return bodyData, nil
}

// Deletes a category from the portal.
func (c *Client) Delete(request DeleteRequest, reqModifiers ...RequestModifier) (types.GoogleCloudApigeeV1ApiResponseWrapper, error) {
	// build & send request (keep comment for code generation)

	// URL formatting
	joined, err := url.JoinPath(c.coreClient.BaseURL, "/v1/"+sdkcore.FmtStringParam(request.Name))
	if err != nil {
		return types.GoogleCloudApigeeV1ApiResponseWrapper{}, err
	}
	url, err := url.Parse(joined)
	if err != nil {
		return types.GoogleCloudApigeeV1ApiResponseWrapper{}, err
	}

	// Query params
	params := url.Query()
	queryXgafv, err := request.QueryXgafv.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "$.xgafv", queryXgafv, false)
	}
	accessToken, err := request.AccessToken.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "access_token", accessToken, false)
	}
	alt, err := request.Alt.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "alt", alt, false)
	}
	callback, err := request.Callback.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "callback", callback, false)
	}
	fields, err := request.Fields.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "fields", fields, false)
	}
	key, err := request.Key.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "key", key, false)
	}
	oauthToken, err := request.OauthToken.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "oauth_token", oauthToken, false)
	}
	prettyPrint, err := request.PrettyPrint.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "prettyPrint", prettyPrint, false)
	}
	quotaUser, err := request.QuotaUser.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "quotaUser", quotaUser, false)
	}
	retention, err := request.Retention.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "retention", retention, false)
	}
	uploadType, err := request.UploadType.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "uploadType", uploadType, false)
	}
	uploadProtocol, err := request.UploadProtocol.Value()
	if err != nil {
		sdkcore.AddQueryParam(params, "upload_protocol", uploadProtocol, false)
	}
	url.RawQuery = params.Encode()

	// Init request
	req, err := http.NewRequest("DELETE", url.String(), nil)
	if err != nil {
		return types.GoogleCloudApigeeV1ApiResponseWrapper{}, err
	}

	// Add headers
	req.Header.Add("x-sideko-sdk-language", "Go")

	// Add auth
	c.coreClient.AddAuth([]string{"Oauth2", "Oauth2c"}, req)

	// Add base client & request level modifiers
	if err := c.coreClient.ApplyModifiers(req, reqModifiers); err != nil {
		return types.GoogleCloudApigeeV1ApiResponseWrapper{}, err
	}

	// Dispatch request
	resp, err := c.coreClient.HttpClient.Do(req)
	if err != nil {
		return types.GoogleCloudApigeeV1ApiResponseWrapper{}, err
	}
	defer resp.Body.Close()

	// Handle response
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return types.GoogleCloudApigeeV1ApiResponseWrapper{}, err
	}

	// Check status
	if resp.StatusCode >= 300 {
		return types.GoogleCloudApigeeV1ApiResponseWrapper{}, sdkcore.NewApiError(*req, *resp, body)
	}
	var bodyData types.GoogleCloudApigeeV1ApiResponseWrapper
	err = json.Unmarshal(body, &bodyData)
	if err != nil {
		return types.GoogleCloudApigeeV1ApiResponseWrapper{}, err
	}
	return bodyData, nil
}
